<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAEgAAABIAAAAAAAAAAAA
        AABGrEZGu0ZGvEZFpUZDfkZDW05CSmNCRoNDRp9DRqlCRqNBRpRBRoBERmZLRlFiRkeFRkacRkaaRkZ5
        RkZSRkhFRk5ERlZERmVERnxERoxERotFRnhLRmBSRk5RSkdIV0ZGd0dGmEZGs0ZGrkZFiEZDYU1DTGND
        RodFRqhERq9DRqFDRo9ERnlIRmNVRlB5RkenRka0RkalRkZ/RkZYRkZIRkdKRkpJRlRGRmxERoxERppE
        RpJGRntHR11GUEpEY0ZGWk5GekdGqkZGuUZGokZFd0hEWFVFSnFGRpNFRpdGRoVJRnJORmFXRlRqRkqT
        Rka5Rka9RkahRkZvRkZNSEZJR0ZSRkZORktIRmRFRo5ERqZFRqZGRpFFSGdEV0xEb0ZGUVRGcUhGqEZG
        wUZGvEZGnEZFcUhGU1ZHSGZKRmhQRl9ZRlVmRkx4RkiURka0RkbFRkbARkacRkZkR0ZKTEZHTUZNR0ZM
        Rk1HRmlGRplFRqxGRqVGR4RGTl9FYktEfkZGVFFGdkhGrUZGyEZGy0ZGu0ZGlUZGZUhMTEtYRkxnRkp4
        RkiMRkajRka4RkbIRkbQRkbFRkafRkZmSEZLUUZGWUZHTUhHRldGRn9GRqNGRqZGRohGTGVGW1BGd0hF
        lUZGY0pGhkZGtUZGz0ZG0kZGyUZGrUZHd0ZSUUZqR0aCRkaNRkaTRkagRka2RkbKRkbSRkbKRkapRkZw
        SEZQUEZGW0ZGUUpGR2ZGRpNGRqRGRoxGTGZGW1FGdEhGlkZGpkZGfERGm0RGu0VG0EZG1EZGzkZGuEZH
        g0ZPWEZhSEZuRkhtRklrRkp0RkmRRka3RkbMRkbMRka2RkaDRkZaS0ZKUEZGTEtGRmlGRo9GRpNGR3FG
        UlRGa0hGi0ZGlkZGjUZGlEJGrURGwkVGz0VG1EZG0UZGwEZGk0ZJX0ZPSUxSRlVQRl1QRmBWRlhpRk2T
        Rka+RkbLRkbBRkafRkZzRkZWSEZJR0pGR1tGR2xGR2pGSlZGVEhGaEZHdEZKb0ZOZEZGoURGt0VGxkVG
        z0ZG0EZGz0ZGwkZGmEZGYktHSV5HRnlGRoxGRoxJRnNWRll3RkmsRkbFRkbFRkayRkaPRkZlRkZLSkdG
        UktGV09GV01GU0hJUEZOU0ZVVUZdUUZoTUZGnkVGtEVGwEZGw0ZGx0ZGykZGvkZGkEdGYFJGSXFGRqJG
        RrhGRrNGRo9NRmFoRkmZRkazRka0RkakRkaAR0ZeTEZLXEZGdUZGhEZGgEZHZkZST0ZnR0Z7R0aIR0aa
        RkZGhEVGmEZGokZGqUZGtEZGvkZGs0ZGhEhGW1hGSX9GRrVGRsVGRrhGRpNJRmBdRkmBRkaNRkaFRkZ1
        SEZhT0ZQXkZHfUZGpEZGsEZGokZHc0ZaUEaERkapRka2Rka6RkZGWkhGY0dGbkZGeEZGkEZGqEZGoEZG
        dEpGVF5GR4xGRr1GRsRGRq9GRodHRlpRRkhhRkZeR0ZXTEZSVUZMZEZHf0ZGpUZGvUZGwUZGq0ZHdkZc
        UEaNRkayRka3RkarRkZGRFJGR01KSkdLUUZJZEZGgEZGfkZGYk5GTWhGRppGRsNGRsJGRqlGRoVGRmVI
        RlZJRlNISExHVUZHbkZGhUZGoEZGuEZGxEZGwEZGqEZIdEZbT0aFRkaeRkaPRkZ5RklGP11HQFNPQUhU
        RUZPTUZIWkdGXEtGUVlGSHlGRq5GRslGRsVGRq5GRpVGRoVGRoFGRnlGR15GUUpGbEZGhEZGlUZGq0ZG
        uUZGtkZGnkZIa0ZZTUZ4RkZ1RkZjRk1XRllGQGVIQFdSQUlYQkZSREdISE9GSl1GSHJGRphGRr9GRs5G
        RspGRrtGRqtGRqNGRqBGRpNGRm5JSU9NUkZOXEZKaEZGgkZGoEZGpUZGikZLXkZcSkZtRkZZRktNRl5I
        RnlGQGhIQVhRQklUQkZOQk5HRGNGRX9GRphGRq5GRr9GRslGRspGRsNGRrtGRrVGRq1GRpRIRmZWRk1p
        R0ZrSUZdT0ZNXkZGfUZGkEZHc0ZQUkZnR0ZvRkZTRk5HRmpGRpVGQWhIQldPQklQQkdJQ1dGRXZGRpFG
        RpdGRplGRp9GRqtGRrpGRsJGRsJGRrtGRq5GRotNRlxnRkmNRkaTRkZ4R0ZYTkZIZUZGfEZHYkZQS0Zj
        RkZoRkZURkpJRlxHRnxGQmZJQlVSQklTQ0dKRVZGRm5HRnZKRm1NRmhNRmpJRndGRpdGRrZGRsFGRr5G
        Rq1GRohORllmRkiGRkaSRkaERkZdSUZKV0ZGY0ZGUktKR1FPRk9URklZRkZWRktRRlhHQl9NQlJcQ0dh
        RUdWRk1QRlZTRlZcRlFkRk5hRk9VRllJRnJGRqBGRr5GRr9GRq9GRo5IRmNTRlBfRkpqRkd0RkZiR0ZO
        S0ZHTktGSV5GRnZHRm1MRlVdRkhvRkZlRklNQlJaQ0x0RUaFRkZ4RkdvRkl1RkiFRkeRRkaFRkZnRkxQ
        Rl9HRopGRrZGRr5GRrBGRpdGRntHRmVLRlhRRk1lRkZzRkZcRkdKRlRGRntGRpxGRpFJRmVaRkp3RkZ4
        RkZiREh4RUeaRkavRkarRkalRkaoRkauRkaxRkakRkZ6RkhXRlVIRnhGRqlGRrhGRqhGRoxGRnhGRnBG
        RmNLRlBiRkd9RkZnRkhORllGRoZGRqlGRptHRmtOSktaS0ZeS0aARUabRUa2RUbHRkbJRkbFRkbBRka8
        Rka3RkasRkaLRkZhRk1MRmVGRo5GRqdGRpRGR2xGSlhGTFRGS1FKSEtcRkZwRkZiRkhORlxGRotGRqlG
        Ro5GTGFHW0pJZ0ZKYkaPRUWrRUa/RUbMRUbTRkbQRkbJRkbARka6RkayRkafRkZ0RkhXRlNJRm1GRohG
        Rn5GSVhGVUlGYUdGYUdIVUZOT0ZTTkZQSkhJRmBGRpFGRqVGR4FGVFlGc0hGkkZGgkaKRESmREW7RUbH
        RUbORUbRRkbMRkbFRkbBRka/Rka2RkaWRkZtRkpTRlZIRmdGRmxGSVNGVkdGZEZGZEZGYEZHZ0ZHa0ZH
        XEhGSmBGRpBGRqNGR3xGV1ZGfUdGnEZHgkZ7RUKYQkSvREW9RUbDRUbIRUbMRkbLRkbMRkbORkbKRka5
        RkaTRkZpRkpRRlJIRldHRlBLSkdRTUdRTkZLVEZGbUZGgkZGakhGT15GRotGRqJGR35GVVhGc0hGiUZK
        bEZtREGIQUKgQkSvREW4RUa9RUbERUbORkbVRkbZRkbWRkbLRka0RkaMRkZmRkhTRktQRklhRkZ2RkZw
        RkZZTEZJYEZGgEZGb0hGUllGR4FGRqJGRohGTl5GX0tGaUZOV0ZhQkB3QEGNQUKfQkSqREWxRUa5RUbG
        RUbVRkbcRkbZRkbORka9RkalRkaJRkZ0RkZzRkaGRkaVRkaFRkZfS0ZLXkZGgUZGdkdGV1JGSXJGRppG
        RpdGSG5GTlNGUUlQS0ZYPz9nP0B6QEGMQUKZQkSfREWpRUa2RUbIRUbURkbPRka+RkapRkaZRkaORkaK
        RkaRRkabRkaWRkZ1SEZXUkZJa0ZGkUZGiUZGYk1GTGRGRYpGRZxGRoxGR21GR1pMRk9PPD1XPT9nPkB3
        QEGDQUKLQkSSREWgRUaxRUa7RUa0RkaTRkZ2RklqRkpnRkpvRkeFRkaMRkZ4R0ZdTkZNYkZGiEZGqUZG
        nUZGbUpGUF1GRoBGRZtGRZ9GRpRGRoJHRmxIOz1LPD5XPT9kPkBvQEF0QUN5QkSDREWPRUaTRUaERUZo
        RktVRldORmBORl5SRlJfRkhiSEZYTkZNXUZHfkZGqEZGuUZGo0ZGb0pGT11GRntGRZRGRZxGRZhGRpJG
        RoZGOzxHOz9MPEBXPUFgPkJjQEJjQUNlQkRqREZqRUdeRUtQRVdIRm1GRoNGRoJHRmlKSFBKVEdIZUZH
        ekZGnEZGtUZGt0ZGmUZGZktGTF5GRXdGRYdGRYdGRX9GR3VGSWtGOz5GO0FIO0NOPEJWPUFaPkFWQEJS
        QUZQQkpORE5LRVNHRV9GRXRGRoVGRoNGRm5GTVJGaEdGh0ZGlkZGpEZGrUZGp0ZGhUZGWkxGSF5GRXBG
        RXZGRW5GSl9GU1RGWlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>